# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ESL
else:
    import _ESL

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ESLevent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    event = property(_ESL.ESLevent_event_get, _ESL.ESLevent_event_set)
    serialized_string = property(_ESL.ESLevent_serialized_string_get, _ESL.ESLevent_serialized_string_set)
    mine = property(_ESL.ESLevent_mine_get, _ESL.ESLevent_mine_set)

    def __init__(self, *args):
        _ESL.ESLevent_swiginit(self, _ESL.new_ESLevent(*args))
    __swig_destroy__ = _ESL.delete_ESLevent

    def serialize(self, format=None):
        return _ESL.ESLevent_serialize(self, format)

    def setPriority(self, *args):
        return _ESL.ESLevent_setPriority(self, *args)

    def getHeader(self, header_name, idx=-1):
        return _ESL.ESLevent_getHeader(self, header_name, idx)

    def getBody(self):
        return _ESL.ESLevent_getBody(self)

    def getType(self):
        return _ESL.ESLevent_getType(self)

    def addBody(self, value):
        return _ESL.ESLevent_addBody(self, value)

    def addHeader(self, header_name, value):
        return _ESL.ESLevent_addHeader(self, header_name, value)

    def pushHeader(self, header_name, value):
        return _ESL.ESLevent_pushHeader(self, header_name, value)

    def unshiftHeader(self, header_name, value):
        return _ESL.ESLevent_unshiftHeader(self, header_name, value)

    def delHeader(self, header_name):
        return _ESL.ESLevent_delHeader(self, header_name)

    def firstHeader(self):
        return _ESL.ESLevent_firstHeader(self)

    def nextHeader(self):
        return _ESL.ESLevent_nextHeader(self)

# Register ESLevent in _ESL:
_ESL.ESLevent_swigregister(ESLevent)
class ESLconnection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ESL.ESLconnection_swiginit(self, _ESL.new_ESLconnection(*args))
    __swig_destroy__ = _ESL.delete_ESLconnection

    def socketDescriptor(self):
        return _ESL.ESLconnection_socketDescriptor(self)

    def connected(self):
        return _ESL.ESLconnection_connected(self)

    def getInfo(self):
        return _ESL.ESLconnection_getInfo(self)

    def send(self, cmd):
        return _ESL.ESLconnection_send(self, cmd)

    def sendRecv(self, cmd):
        return _ESL.ESLconnection_sendRecv(self, cmd)

    def api(self, cmd, arg=None):
        return _ESL.ESLconnection_api(self, cmd, arg)

    def bgapi(self, cmd, arg=None, job_uuid=None):
        return _ESL.ESLconnection_bgapi(self, cmd, arg, job_uuid)

    def sendEvent(self, send_me):
        return _ESL.ESLconnection_sendEvent(self, send_me)

    def sendMSG(self, send_me, uuid=None):
        return _ESL.ESLconnection_sendMSG(self, send_me, uuid)

    def recvEvent(self):
        return _ESL.ESLconnection_recvEvent(self)

    def recvEventTimed(self, ms):
        return _ESL.ESLconnection_recvEventTimed(self, ms)

    def filter(self, header, value):
        return _ESL.ESLconnection_filter(self, header, value)

    def events(self, etype, value):
        return _ESL.ESLconnection_events(self, etype, value)

    def execute(self, app, arg=None, uuid=None):
        return _ESL.ESLconnection_execute(self, app, arg, uuid)

    def executeAsync(self, app, arg=None, uuid=None):
        return _ESL.ESLconnection_executeAsync(self, app, arg, uuid)

    def setAsyncExecute(self, val):
        return _ESL.ESLconnection_setAsyncExecute(self, val)

    def setEventLock(self, val):
        return _ESL.ESLconnection_setEventLock(self, val)

    def disconnect(self):
        return _ESL.ESLconnection_disconnect(self)

# Register ESLconnection in _ESL:
_ESL.ESLconnection_swigregister(ESLconnection)

def eslSetLogLevel(level):
    return _ESL.eslSetLogLevel(level)

